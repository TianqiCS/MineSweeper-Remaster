{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Square","react_default","a","createElement","className","disabled","this","props","isOpen","value","name","onMouseUp","onClick","React","Component","Board","i","_this","App_Square","isFlag","isMine","squares","e","key","index","row","settings","cols","push","renderSquare","rows","renderRow","Game","_this2","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","history","Array","fill","xIsNext","GameOver","mines","remain","initilize","open","nativeEvent","which","try","flag","length","slice","up","down","left","right","sum","result","setState","self","interval","setInterval","now","Date","_this3","current","App_Board","handleClick","getStatus","size","mine","Math","floor","random","gameover","calculate","opened","mode","concat","App","_this4","difficulty","start","handleChange","bind","assertThisInitialized","handleSubmit","event","defineProperty","target","parseInt","preventDefault","App_Game","onSubmit","type","checked","onChange","min","max","document","addEventListener","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9edafaca.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n//import logo from './logo.svg';\r\nimport './App.css';\r\n\r\nclass Square extends React.Component {\r\n    render() {\r\n        return (\r\n            <button className=\"square\" disabled={this.props.isOpen && this.props.value === null} name={this.props.value} onMouseUp={this.props.onClick}>\r\n                {this.props.value}\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\nclass Board extends React.Component {\r\n    renderSquare(i) {\r\n        return (\r\n            <Square\r\n                isFlag={this.props.isFlag[i]}  // can be deleted\r\n                isMine={this.props.isMine[i]}  // can be deleted\r\n                isOpen={this.props.isOpen[i]}\r\n                value={this.props.squares[i]}\r\n                onClick={(e) => this.props.onClick(i,e)}\r\n                key={i}\r\n            />\r\n        );\r\n    }\r\n\r\n    renderRow(index) {\r\n        let row = [];\r\n        for (let i = 0; i < this.props.settings.cols; i++) {\r\n            row.push(this.renderSquare(i+this.props.settings.cols*index));\r\n        }\r\n        return row\r\n    }\r\n\r\n    render() {\r\n        let rows = [];\r\n        for (let i = 0; i < this.props.settings.rows; i++) {\r\n            rows.push(\r\n                <div className=\"board-row\">\r\n                    {this.renderRow(i)}\r\n                </div>\r\n            );\r\n        }\r\n        return (\r\n            <div>\r\n                {rows}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            history: [{\r\n                squares: Array(this.props.cols * this.props.rows).fill(null),\r\n            }],\r\n            isMine: Array(this.props.rows * this.props.cols).fill(0),\r\n            isOpen: Array(this.props.rows * this.props.cols).fill(0),\r\n            isFlag: Array(this.props.rows * this.props.cols).fill(0),\r\n            xIsNext: true,\r\n            GameOver: -1,\r\n            rows: this.props.rows,\r\n            cols: this.props.cols,\r\n            mines: this.props.mines,\r\n            remain: this.props.mines,\r\n        };\r\n\r\n    }\r\n\r\n    handleClick(i,e) {\r\n        if (this.state.GameOver === -1) {\r\n            this.initilize(i);\r\n            this.open(i);\r\n\r\n        }\r\n        else if (!this.state.GameOver && e.nativeEvent.which === 1) {\r\n          this.open(i)\r\n\r\n        }\r\n        else if (!this.state.GameOver && e.nativeEvent.which === 3) {\r\n          this.flag(i)\r\n        }\r\n        else if (!this.state.GameOver && e.nativeEvent.which === 2) {\r\n          this.try(i)\r\n        }\r\n    }\r\n\r\n    try(index) {\r\n        const history = this.state.history;\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n        if (this.state.isOpen[index]) {\r\n            let up = false;\r\n            let down = false;\r\n            let left = false;\r\n            let right = false;\r\n            let sum = 0;\r\n\r\n            if (index % this.state.cols) {\r\n                if (this.state.isFlag[index - 1]) {\r\n                    sum += 1;\r\n                }\r\n                left = true;\r\n            }\r\n            if (index % this.state.cols !== this.state.cols-1) {\r\n                if (this.state.isFlag[index + 1]) {\r\n                    sum += 1;\r\n                }\r\n                right = true;\r\n            }\r\n            if (index - this.state.cols >= 0) {\r\n                if (this.state.isFlag[index - this.state.cols]) {\r\n                    sum += 1;\r\n                }\r\n                up = true;\r\n            }\r\n            if (index + this.state.cols < this.state.cols * this.state.rows) {\r\n                if (this.state.isFlag[index + this.state.cols]) {\r\n                    sum += 1;\r\n                }\r\n                down = true;\r\n            }\r\n\r\n            if (up && left) {\r\n                if (this.state.isFlag[index - 1 - this.state.cols]) {\r\n                    sum += 1;\r\n                }\r\n            }\r\n            if (up && right) {\r\n                if (this.state.isFlag[index + 1 - this.state.cols]) {\r\n                    sum += 1;\r\n                }\r\n            }\r\n            if (down && left) {\r\n                if (this.state.isFlag[index - 1 + this.state.cols]) {\r\n                    sum += 1;\r\n                }\r\n            }\r\n            if (down && right) {\r\n                if (this.state.isFlag[index + 1 + this.state.cols]) {\r\n                    sum += 1;\r\n                }\r\n            }\r\n\r\n            if (sum === squares[index]) {\r\n                if (left) {\r\n                    this.open(index - 1);\r\n                }\r\n                if (right) {\r\n                    this.open(index + 1);\r\n                }\r\n                if (up) {\r\n                    this.open(index - this.state.cols);\r\n                }\r\n                if (down) {\r\n                    this.open(index + this.state.cols);\r\n                }\r\n                if (left && up) {\r\n                    this.open(index - 1 - this.state.cols);\r\n                }\r\n                if (right && up) {\r\n                    this.open(index + 1 - this.state.cols);\r\n                }\r\n                if (left && down) {\r\n                    this.open(index - 1 + this.state.cols);\r\n                }\r\n                if (right && down) {\r\n                    this.open(index + 1 + this.state.cols);\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    flag(i) {\r\n        const history = this.state.history;\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n        const isFlag = this.state.isFlag.slice();\r\n        if (!this.state.isOpen[i]) {\r\n            isFlag[i] = !isFlag[i];\r\n            let result;\r\n            if (isFlag[i]) {\r\n                squares[i] = \"P\";\r\n                result = 1;\r\n            }\r\n            else {\r\n                squares[i] = null;\r\n                result = -1;\r\n            }\r\n            this.setState({\r\n                isFlag : isFlag,\r\n                history: [{\r\n                    squares: squares,\r\n                }],\r\n                remain: this.state.remain - result,\r\n            })\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        const self = this;\r\n        this.interval = setInterval(function() {\r\n            self.setState({\r\n                now: new Date(),\r\n            });\r\n        }, 1000);\r\n    }\r\n\r\n    render() {\r\n        const history = this.state.history;\r\n        const current = history[history.length - 1];\r\n\r\n        if (this.state.GameOver === 1) {\r\n            for (let i = 0; i < this.state.cols * this.state.rows; i++) {\r\n                if (this.state.isMine[i]) {\r\n                    if (!this.state.isFlag[i]) {\r\n                        current.squares[i] = \"@\";\r\n                    }\r\n                }\r\n                else if (this.state.isFlag[i]) {\r\n                    current.squares[i] = \"X\";\r\n                }\r\n            }\r\n        }\r\n        if (this.state.GameOver === 2) {\r\n            for (let i = 0; i < this.state.cols * this.state.rows; i++) {\r\n                if (this.state.isMine[i]) {\r\n                    current.squares[i] = \"P\";\r\n                }\r\n            }\r\n        }\r\n        return (\r\n            <div className=\"game\">\r\n                <div className=\"game-board\">\r\n                    <Board\r\n                        squares={current.squares}\r\n                        isOpen={this.state.isOpen}\r\n                        isFlag={this.state.isFlag}\r\n                        isMine={this.state.isMine.slice().fill(0)}\r\n                        settings={{rows: this.state.rows, cols: this.state.cols}}\r\n                        onClick={(i,e) => this.handleClick(i,e)}\r\n                    />\r\n                </div>\r\n                <div className=\"game-info\">\r\n                    <div>{this.getStatus()}</div>\r\n                    <div>{\"Mine Remains: \" + this.state.remain}</div>\r\n                    <div>{\"Time: \" + this.state.now}</div>\r\n                    <div>\r\n                        <li>{\"Left Click to select\"}</li>\r\n                        <li>{\"Right Click to flag\"}</li>\r\n                        <li>{\"Middle Button to auto select\"}</li>\r\n                        <li>{\"Reload the page to restart\"}</li>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    check() {\r\n        return this.state.mines >= this.state.rows * this.state.cols;\r\n    }\r\n\r\n    getStatus() {\r\n        switch (this.state.GameOver) {\r\n            case -1:\r\n                return \"Ready to Begin\";\r\n            case 0:\r\n                return \"In Game\";\r\n            case 1:\r\n              return \"You Lost\";\r\n            case 2:\r\n              return \"You win\";\r\n            default:\r\n              return \"UNKNOWN\"\r\n        }\r\n    }\r\n\r\n    initilize(index) {\r\n        const size = this.state.rows * this.state.cols;\r\n        for (let i=0; i < this.state.mines; i++) {\r\n            let mine = Math.floor(Math.random() * size);\r\n            if (mine === index || this.state.isMine[mine] === 1) {\r\n                i--;\r\n            }\r\n            else {\r\n                this.state.isMine[mine] = 1;\r\n            }\r\n        }\r\n        let isOpen = Array(this.state.cols * this.state.rows).fill(0);\r\n        this.setState({\r\n            isOpen: isOpen,\r\n            GameOver: 0,\r\n        });\r\n    }\r\n\r\n    open(index) {\r\n        if (!this.state.isOpen[index] && !this.state.isFlag[index]) {\r\n            if (this.state.isMine[index]) {\r\n                this.gameover(1);\r\n            }\r\n            else {\r\n                this.calculate(index);\r\n                let opened = 0;\r\n                for (let i=0;i < this.state.cols * this.state.rows; i++) {\r\n                    if (this.state.isOpen[i]) {\r\n                        opened++;\r\n                    }\r\n                }\r\n                if (opened === this.state.cols * this.state.rows - this.state.mines) {\r\n                  this.gameover(2)\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    gameover(mode) {\r\n      this.setState({\r\n        GameOver: mode,\r\n      });\r\n    }\r\n\r\n    calculate(index) {\r\n        if (!this.state.isOpen[index] && !this.state.isFlag[index]) {\r\n\r\n            let up = false;\r\n            let down = false;\r\n            let left = false;\r\n            let right = false;\r\n\r\n            let sum = 0;\r\n\r\n            if (this.state.isMine[index]) {\r\n              return 1;\r\n            }\r\n\r\n            else {\r\n                const history = this.state.history;\r\n                const current = history[history.length - 1];\r\n                const squares = current.squares;\r\n                const isOpen = this.state.isOpen;\r\n                if (index % this.state.cols) {\r\n                    if (this.state.isMine[index - 1]) {\r\n                        sum += 1;\r\n                    }\r\n                    left = true;\r\n                }\r\n                if (index % this.state.cols !== this.state.cols-1) {\r\n                    if (this.state.isMine[index + 1]) {\r\n                        sum += 1;\r\n                    }\r\n                    right = true;\r\n                }\r\n                if (index - this.state.cols >= 0) {\r\n                    if (this.state.isMine[index - this.state.cols]) {\r\n                        sum += 1;\r\n                    }\r\n                    up = true;\r\n                }\r\n                if (index + this.state.cols < this.state.cols * this.state.rows) {\r\n                    if (this.state.isMine[index + this.state.cols]) {\r\n                        sum += 1;\r\n                    }\r\n                    down = true;\r\n                }\r\n\r\n                if (up && left) {\r\n                    if (this.state.isMine[index - 1 - this.state.cols]) {\r\n                        sum += 1;\r\n                    }\r\n                }\r\n                if (up && right) {\r\n                    if (this.state.isMine[index + 1 - this.state.cols]) {\r\n                        sum += 1;\r\n                    }\r\n                }\r\n                if (down && left) {\r\n                    if (this.state.isMine[index - 1 + this.state.cols]) {\r\n                        sum += 1;\r\n                    }\r\n                }\r\n                if (down && right) {\r\n                    if (this.state.isMine[index + 1 + this.state.cols]) {\r\n                        sum += 1;\r\n                    }\r\n                }\r\n                if (sum) {squares[index] = sum;}\r\n                isOpen[index] = true;\r\n                this.setState({\r\n                    isOpen: isOpen,\r\n                    history: history.concat([{\r\n                        squares: squares\r\n                    }]),\r\n                });\r\n\r\n                if (sum) {\r\n                  return sum;\r\n                }\r\n                else {\r\n                    if (left) {\r\n                        this.calculate(index - 1)\r\n                    }\r\n                    if (right) {\r\n                        this.calculate(index + 1)\r\n                    }\r\n\r\n                    if (up) {\r\n                        this.calculate(index - this.state.cols)\r\n                    }\r\n\r\n                    if (down) {\r\n                        this.calculate(index + this.state.cols)\r\n                    }\r\n\r\n                    if (up && left) {\r\n                        this.calculate(index - 1 - this.state.cols)\r\n                    }\r\n                    if (up && right) {\r\n                        this.calculate(index + 1 - this.state.cols)\r\n                    }\r\n\r\n                    if (down && left) {\r\n                        this.calculate(index - 1 + this.state.cols)\r\n                    }\r\n\r\n                    if (down && right) {\r\n                        this.calculate(index + 1 + this.state.cols)\r\n                    }\r\n                    return 0\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n}\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            value: '',\r\n            difficulty: 1,\r\n            cols: null,\r\n            rows: null,\r\n            mines: null,\r\n            start: false,\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({[event.target.name]: parseInt(event.target.value)});\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        let cols, rows, mines, start;\r\n        switch (this.state.difficulty) {\r\n            case 1:\r\n                cols = 9;\r\n                rows = 9;\r\n                mines = 10;\r\n                start = true;\r\n                break;\r\n            case 2:\r\n                cols = 16;\r\n                rows = 16;\r\n                mines = 40;\r\n                start = true;\r\n                break;\r\n            case 3:\r\n                cols = 30;\r\n                rows = 16;\r\n                mines = 99;\r\n                start = true;\r\n                break;\r\n            case 4:\r\n                if (this.state.rows && this.state.cols && this.state.mines) {\r\n                    start = true;\r\n                    cols = this.state.rows;\r\n                    rows = this.state.cols;\r\n                    mines = this.state.mines;\r\n                }\r\n                break;\r\n            default:\r\n        }\r\n        if (start) {\r\n            this.setState({\r\n                cols: cols,\r\n                rows: rows,\r\n                mines: mines,\r\n                start: start,\r\n            });\r\n        }\r\n\r\n        event.preventDefault();\r\n    }\r\n\r\n    render() {\r\n        if (this.state.start) {\r\n            return(\r\n                <Game\r\n                    cols={this.state.cols}\r\n                    rows={this.state.rows}\r\n                    mines={this.state.mines}\r\n                    difficulty={this.state.difficulty}\r\n                />\r\n            )\r\n        }\r\n        return (\r\n            <form onSubmit={this.handleSubmit}>\r\n                <div>\r\n                    Difficulty:\r\n                    <td><input type=\"radio\" name=\"difficulty\"\r\n                               value=\"1\"\r\n                               checked={this.state.difficulty === 1}\r\n                               onChange={this.handleChange} />{\"Easy\"}</td>\r\n                    <td><input type=\"radio\" name=\"difficulty\"\r\n                               value=\"2\"\r\n                               checked={this.state.difficulty === 2}\r\n                               onChange={this.handleChange} />{\"Normal\"}</td>\r\n                    <td><input type=\"radio\" name=\"difficulty\"\r\n                               value=\"3\"\r\n                               checked={this.state.difficulty === 3}\r\n                               onChange={this.handleChange} />{\"Hard\"}</td>\r\n                    <td><input type=\"radio\" name=\"difficulty\"\r\n                               value=\"4\"\r\n                               checked={this.state.difficulty === 4}\r\n                               onChange={this.handleChange} />{\"Custom\"}</td>\r\n                </div>\r\n                <br/>\r\n                <div>\r\n                    Cols (between 3 and 50): <input type=\"number\" name=\"cols\" value={this.state.cols} min=\"3\" max=\"50\" onChange={this.handleChange} disabled={this.state.difficulty!==4}/><br/>\r\n                    Rows (between 3 and 50): <input type=\"number\" name=\"rows\" value={this.state.rows} min=\"3\" max=\"50\" onChange={this.handleChange} disabled={this.state.difficulty!==4}/><br/>\r\n                    Quantity (between 1 and the size): <input type=\"number\" name=\"mines\" value={this.state.mines} onChange={this.handleChange} min=\"1\" max={this.state.cols * this.state.rows - 1} disabled={this.state.difficulty!==4}/>\r\n                </div>\r\n                <br/>\r\n                <input type=\"submit\" value=\"Start Game\" />\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\n// ========================================\r\ndocument.addEventListener('contextmenu', event => event.preventDefault());\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}