{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Square","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","className","disabled","isOpen","value","name","onMouseUp","onClick","React","Component","Board","i","_this","App_Square","isFlag","isMine","squares","e","key","index","row","settings","cols","push","renderSquare","rows","renderRow","Game","_this2","state","history","Array","fill","xIsNext","GameOver","mines","length","initilize","open","nativeEvent","which","try","flag","slice","up","down","left","right","sum","setState","_this3","current","App_Board","handleClick","getStatus","size","mine","Math","floor","random","gameover","calculate","opened","mode","concat","document","addEventListener","event","preventDefault","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1336831a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass Square extends React.Component {\n    constructor(props) {\n      super(props);\n    }\n    render() {\n        return (\n            <button className=\"square\" disabled={this.props.isOpen && this.props.value === null} name={this.props.value} onMouseUp={this.props.onClick}>\n                {this.props.value}\n            </button>\n        );\n    }\n}\n\nclass Board extends React.Component {\n    renderSquare(i) {\n        return (\n            <Square\n                isFlag={this.props.isFlag[i]}  // can be deleted\n                isMine={this.props.isMine[i]}  // can be deleted\n                isOpen={this.props.isOpen[i]}\n                value={this.props.squares[i]}\n                onClick={(e) => this.props.onClick(i,e)}\n                key={i}\n            />\n        );\n    }\n\n    renderRow(index) {\n        let row = [];\n        for (let i = 0; i < this.props.settings.cols; i++) {\n            row.push(this.renderSquare(i+this.props.settings.cols*index));\n        }\n        return row\n    }\n\n    render() {\n        let rows = [];\n        for (let i = 0; i < this.props.settings.rows; i++) {\n            rows.push(\n                <div className=\"board-row\">\n                    {this.renderRow(i)}\n                </div>\n            );\n        }\n        return (\n            <div>\n                {rows}\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            history: [{\n                squares: Array(50 * 30).fill(null),\n            }],\n            isMine: Array(1500).fill(0),\n            isOpen: Array(1500).fill(0),\n            isFlag: Array(1500).fill(0),\n            xIsNext: true,\n            GameOver: -1,\n            rows: 30,\n            cols: 50,\n            mines: 300,\n        };\n\n    }\n\n    handleClick(i,e) {\n        const history = this.state.history;\n        const current = history[history.length - 1];\n        if (this.state.GameOver === -1) {\n            this.initilize(i);\n            this.open(i);\n\n        }\n        else if (!this.state.GameOver && e.nativeEvent.which === 1) {\n          this.open(i)\n\n        }\n        else if (!this.state.GameOver && e.nativeEvent.which === 3) {\n          this.flag(i)\n        }\n        else if (!this.state.GameOver && e.nativeEvent.which === 2) {\n          this.try(i)\n        }\n    }\n\n    try(index) {\n        const history = this.state.history;\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n        if (this.state.isOpen[index]) {\n            let up = false;\n            let down = false;\n            let left = false;\n            let right = false;\n            let sum = 0;\n\n            if (index % this.state.cols) {\n                if (this.state.isFlag[index - 1]) {\n                    sum += 1;\n                }\n                left = true;\n            }\n            if (index % this.state.cols !== this.state.cols-1) {\n                if (this.state.isFlag[index + 1]) {\n                    sum += 1;\n                }\n                right = true;\n            }\n            if (index - this.state.cols >= 0) {\n                if (this.state.isFlag[index - this.state.cols]) {\n                    sum += 1;\n                }\n                up = true;\n            }\n            if (index + this.state.cols < this.state.cols * this.state.rows) {\n                if (this.state.isFlag[index + this.state.cols]) {\n                    sum += 1;\n                }\n                down = true;\n            }\n\n            if (up && left) {\n                if (this.state.isFlag[index - 1 - this.state.cols]) {\n                    sum += 1;\n                }\n            }\n            if (up && right) {\n                if (this.state.isFlag[index + 1 - this.state.cols]) {\n                    sum += 1;\n                }\n            }\n            if (down && left) {\n                if (this.state.isFlag[index - 1 + this.state.cols]) {\n                    sum += 1;\n                }\n            }\n            if (down && right) {\n                if (this.state.isFlag[index + 1 + this.state.cols]) {\n                    sum += 1;\n                }\n            }\n\n            if (sum === squares[index]) {\n                if (left) {\n                    this.open(index - 1);\n                }\n                if (right) {\n                    this.open(index + 1);\n                }\n                if (up) {\n                    this.open(index - this.state.cols);\n                }\n                if (down) {\n                    this.open(index + this.state.cols);\n                }\n                if (left && up) {\n                    this.open(index - 1 - this.state.cols);\n                }\n                if (right && up) {\n                    this.open(index + 1 - this.state.cols);\n                }\n                if (left && down) {\n                    this.open(index - 1 + this.state.cols);\n                }\n                if (right && down) {\n                    this.open(index + 1 + this.state.cols);\n                }\n            }\n\n        }\n    }\n\n    flag(i) {\n        const history = this.state.history;\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n        const isFlag = this.state.isFlag.slice();\n        if (!this.state.isOpen[i]) {\n            isFlag[i] = !isFlag[i];\n            if (isFlag[i]) {\n                squares[i] = \"P\";\n            }\n            else {\n                squares[i] = null;\n            }\n            this.setState({\n                isFlag : isFlag,\n                history: [{\n                    squares: squares,\n                }],\n            })\n        }\n    }\n\n    render() {\n        const history = this.state.history;\n        const current = history[history.length - 1];\n\n        if (this.state.GameOver === 1) {\n            for (let i = 0; i < this.state.cols * this.state.rows; i++) {\n                if (this.state.isMine[i]) {\n                    current.squares[i] = \"@\";\n                }\n                else if (this.state.isFlag[i]) {\n                    current.squares[i] = \"X\";\n                }\n            }\n        }\n        if (this.state.GameOver === 2) {\n            for (let i = 0; i < this.state.cols * this.state.rows; i++) {\n                if (this.state.isMine[i]) {\n                    current.squares[i] = \"P\";\n                }\n            }\n        }\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board\n                        squares={current.squares}\n                        isOpen={this.state.isOpen}\n                        isFlag={this.state.isFlag}\n                        isMine={this.state.isMine.slice().fill(0)}\n                        settings={{rows: this.state.rows, cols: this.state.cols}}\n                        onClick={(i,e) => this.handleClick(i,e)}\n                    />\n                </div>\n                <div className=\"game-info\">\n                    <div>{this.getStatus()}</div>\n                    <ol>{/* TODO */}</ol>\n                </div>\n            </div>\n        );\n    }\n\n    check() {\n        return this.state.mines >= this.state.rows * this.state.cols;\n    }\n\n    getStatus() {\n        switch (this.state.GameOver) {\n            case -1:\n                return \"Ready to Begin\";\n            case 0:\n                return \"In Game\";\n            case 1:\n              return \"You Lost\";\n            case 2:\n              return \"You win\";\n            default:\n              return \"UNKNOWN\"\n        }\n    }\n\n    initilize(index) {\n        const size = this.state.rows * this.state.cols;\n        for (let i=0; i < this.state.mines; i++) {\n            let mine = Math.floor(Math.random() * size);\n            if (mine === index || this.state.isMine[mine] === 1) {\n                i--;\n            }\n            else {\n                this.state.isMine[mine] = 1;\n            }\n        }\n        let isOpen = Array(this.state.cols * this.state.rows).fill(0);\n        this.setState({\n            isOpen: isOpen,\n            isFlag: Array(this.state.cols * this.state.rows).fill(0),\n            GameOver: 0,\n        });\n    }\n\n    open(index) {\n        if (!this.state.isOpen[index] && !this.state.isFlag[index]) {\n            if (this.state.isMine[index]) {\n                this.gameover(1);\n            }\n            else {\n                this.calculate(index);\n                let opened = 0;\n                for (let i=0;i < this.state.cols * this.state.rows; i++) {\n                    if (this.state.isOpen[i]) {\n                        opened++;\n                    }\n                }\n                if (opened === this.state.cols * this.state.rows - this.state.mines) {\n                  this.gameover(2)\n                }\n            }\n        }\n\n    }\n\n    gameover(mode) {\n      this.setState({\n        GameOver: mode,\n      });\n    }\n\n    calculate(index) {\n        if (!this.state.isOpen[index] && !this.state.isFlag[index]) {\n\n            let up = false;\n            let down = false;\n            let left = false;\n            let right = false;\n\n            let sum = 0;\n\n            if (this.state.isMine[index]) {\n              return 1;\n            }\n\n            else {\n                const history = this.state.history;\n                const current = history[history.length - 1];\n                const squares = current.squares;\n                const isOpen = this.state.isOpen;\n                if (index % this.state.cols) {\n                    if (this.state.isMine[index - 1]) {\n                        sum += 1;\n                    }\n                    left = true;\n                }\n                if (index % this.state.cols !== this.state.cols-1) {\n                    if (this.state.isMine[index + 1]) {\n                        sum += 1;\n                    }\n                    right = true;\n                }\n                if (index - this.state.cols >= 0) {\n                    if (this.state.isMine[index - this.state.cols]) {\n                        sum += 1;\n                    }\n                    up = true;\n                }\n                if (index + this.state.cols < this.state.cols * this.state.rows) {\n                    if (this.state.isMine[index + this.state.cols]) {\n                        sum += 1;\n                    }\n                    down = true;\n                }\n\n                if (up && left) {\n                    if (this.state.isMine[index - 1 - this.state.cols]) {\n                        sum += 1;\n                    }\n                }\n                if (up && right) {\n                    if (this.state.isMine[index + 1 - this.state.cols]) {\n                        sum += 1;\n                    }\n                }\n                if (down && left) {\n                    if (this.state.isMine[index - 1 + this.state.cols]) {\n                        sum += 1;\n                    }\n                }\n                if (down && right) {\n                    if (this.state.isMine[index + 1 + this.state.cols]) {\n                        sum += 1;\n                    }\n                }\n                if (sum) {squares[index] = sum;}\n                isOpen[index] = true;\n                this.setState({\n                    isOpen: isOpen,\n                    history: history.concat([{\n                        squares: squares\n                    }]),\n                });\n\n                if (sum) {\n                  return sum;\n                }\n                else {\n                    if (left) {\n                        this.calculate(index - 1)\n                    }\n                    if (right) {\n                        this.calculate(index + 1)\n                    }\n\n                    if (up) {\n                        this.calculate(index - this.state.cols)\n                    }\n\n                    if (down) {\n                        this.calculate(index + this.state.cols)\n                    }\n\n                    if (up && left) {\n                        this.calculate(index - 1 - this.state.cols)\n                    }\n                    if (up && right) {\n                        this.calculate(index + 1 - this.state.cols)\n                    }\n\n                    if (down && left) {\n                        this.calculate(index - 1 + this.state.cols)\n                    }\n\n                    if (down && right) {\n                        this.calculate(index + 1 + this.state.cols)\n                    }\n                    return 0\n                }\n            }\n        }\n        else {\n            return 0;\n        }\n    }\n}\n\n// ========================================\ndocument.addEventListener('contextmenu', event => event.preventDefault());\nexport default Game;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}