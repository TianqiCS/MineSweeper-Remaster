{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Square","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","className","disabled","isOpen","value","name","onMouseUp","onClick","React","Component","Board","i","_this","App_Square","isFlag","isMine","squares","e","key","index","row","settings","cols","push","renderSquare","rows","renderRow","Game","_this2","state","history","Array","fill","xIsNext","GameOver","mines","remain","length","initilize","open","nativeEvent","which","try","flag","slice","up","down","left","right","sum","result","setState","self","interval","setInterval","now","Date","_this3","current","App_Board","handleClick","getStatus","size","mine","Math","floor","random","gameover","calculate","opened","mode","concat","document","addEventListener","event","preventDefault","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6c4420ca.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nclass Square extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n    }\r\n    render() {\r\n        return (\r\n            <button className=\"square\" disabled={this.props.isOpen && this.props.value === null} name={this.props.value} onMouseUp={this.props.onClick}>\r\n                {this.props.value}\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\nclass Board extends React.Component {\r\n    renderSquare(i) {\r\n        return (\r\n            <Square\r\n                isFlag={this.props.isFlag[i]}  // can be deleted\r\n                isMine={this.props.isMine[i]}  // can be deleted\r\n                isOpen={this.props.isOpen[i]}\r\n                value={this.props.squares[i]}\r\n                onClick={(e) => this.props.onClick(i,e)}\r\n                key={i}\r\n            />\r\n        );\r\n    }\r\n\r\n    renderRow(index) {\r\n        let row = [];\r\n        for (let i = 0; i < this.props.settings.cols; i++) {\r\n            row.push(this.renderSquare(i+this.props.settings.cols*index));\r\n        }\r\n        return row\r\n    }\r\n\r\n    render() {\r\n        let rows = [];\r\n        for (let i = 0; i < this.props.settings.rows; i++) {\r\n            rows.push(\r\n                <div className=\"board-row\">\r\n                    {this.renderRow(i)}\r\n                </div>\r\n            );\r\n        }\r\n        return (\r\n            <div>\r\n                {rows}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            history: [{\r\n                squares: Array(50 * 30).fill(null),\r\n            }],\r\n            isMine: Array(1500).fill(0),\r\n            isOpen: Array(1500).fill(0),\r\n            isFlag: Array(1500).fill(0),\r\n            xIsNext: true,\r\n            GameOver: -1,\r\n            rows: 30,\r\n            cols: 50,\r\n            mines: 300,\r\n            remain: 300,\r\n        };\r\n\r\n    }\r\n\r\n    handleClick(i,e) {\r\n        const history = this.state.history;\r\n        const current = history[history.length - 1];\r\n        if (this.state.GameOver === -1) {\r\n            this.initilize(i);\r\n            this.open(i);\r\n\r\n        }\r\n        else if (!this.state.GameOver && e.nativeEvent.which === 1) {\r\n          this.open(i)\r\n\r\n        }\r\n        else if (!this.state.GameOver && e.nativeEvent.which === 3) {\r\n          this.flag(i)\r\n        }\r\n        else if (!this.state.GameOver && e.nativeEvent.which === 2) {\r\n          this.try(i)\r\n        }\r\n    }\r\n\r\n    try(index) {\r\n        const history = this.state.history;\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n        if (this.state.isOpen[index]) {\r\n            let up = false;\r\n            let down = false;\r\n            let left = false;\r\n            let right = false;\r\n            let sum = 0;\r\n\r\n            if (index % this.state.cols) {\r\n                if (this.state.isFlag[index - 1]) {\r\n                    sum += 1;\r\n                }\r\n                left = true;\r\n            }\r\n            if (index % this.state.cols !== this.state.cols-1) {\r\n                if (this.state.isFlag[index + 1]) {\r\n                    sum += 1;\r\n                }\r\n                right = true;\r\n            }\r\n            if (index - this.state.cols >= 0) {\r\n                if (this.state.isFlag[index - this.state.cols]) {\r\n                    sum += 1;\r\n                }\r\n                up = true;\r\n            }\r\n            if (index + this.state.cols < this.state.cols * this.state.rows) {\r\n                if (this.state.isFlag[index + this.state.cols]) {\r\n                    sum += 1;\r\n                }\r\n                down = true;\r\n            }\r\n\r\n            if (up && left) {\r\n                if (this.state.isFlag[index - 1 - this.state.cols]) {\r\n                    sum += 1;\r\n                }\r\n            }\r\n            if (up && right) {\r\n                if (this.state.isFlag[index + 1 - this.state.cols]) {\r\n                    sum += 1;\r\n                }\r\n            }\r\n            if (down && left) {\r\n                if (this.state.isFlag[index - 1 + this.state.cols]) {\r\n                    sum += 1;\r\n                }\r\n            }\r\n            if (down && right) {\r\n                if (this.state.isFlag[index + 1 + this.state.cols]) {\r\n                    sum += 1;\r\n                }\r\n            }\r\n\r\n            if (sum === squares[index]) {\r\n                if (left) {\r\n                    this.open(index - 1);\r\n                }\r\n                if (right) {\r\n                    this.open(index + 1);\r\n                }\r\n                if (up) {\r\n                    this.open(index - this.state.cols);\r\n                }\r\n                if (down) {\r\n                    this.open(index + this.state.cols);\r\n                }\r\n                if (left && up) {\r\n                    this.open(index - 1 - this.state.cols);\r\n                }\r\n                if (right && up) {\r\n                    this.open(index + 1 - this.state.cols);\r\n                }\r\n                if (left && down) {\r\n                    this.open(index - 1 + this.state.cols);\r\n                }\r\n                if (right && down) {\r\n                    this.open(index + 1 + this.state.cols);\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    flag(i) {\r\n        const history = this.state.history;\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n        const isFlag = this.state.isFlag.slice();\r\n        if (!this.state.isOpen[i]) {\r\n            isFlag[i] = !isFlag[i];\r\n            let result;\r\n            if (isFlag[i]) {\r\n                squares[i] = \"P\";\r\n                result = 1;\r\n            }\r\n            else {\r\n                squares[i] = null;\r\n                result = -1;\r\n            }\r\n            this.setState({\r\n                isFlag : isFlag,\r\n                history: [{\r\n                    squares: squares,\r\n                }],\r\n                remain: this.state.remain - result,\r\n            })\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        const self = this;\r\n        this.interval = setInterval(function() {\r\n            self.setState({\r\n                now: new Date(),\r\n            });\r\n        }, 1000);\r\n    }\r\n\r\n    render() {\r\n        const history = this.state.history;\r\n        const current = history[history.length - 1];\r\n\r\n        if (this.state.GameOver === 1) {\r\n            for (let i = 0; i < this.state.cols * this.state.rows; i++) {\r\n                if (this.state.isMine[i]) {\r\n                    if (!this.state.isFlag[i]) {\r\n                        current.squares[i] = \"@\";\r\n                    }\r\n                }\r\n                else if (this.state.isFlag[i]) {\r\n                    current.squares[i] = \"X\";\r\n                }\r\n            }\r\n        }\r\n        if (this.state.GameOver === 2) {\r\n            for (let i = 0; i < this.state.cols * this.state.rows; i++) {\r\n                if (this.state.isMine[i]) {\r\n                    current.squares[i] = \"P\";\r\n                }\r\n            }\r\n        }\r\n        return (\r\n            <div className=\"game\">\r\n                <div className=\"game-board\">\r\n                    <Board\r\n                        squares={current.squares}\r\n                        isOpen={this.state.isOpen}\r\n                        isFlag={this.state.isFlag}\r\n                        isMine={this.state.isMine.slice().fill(0)}\r\n                        settings={{rows: this.state.rows, cols: this.state.cols}}\r\n                        onClick={(i,e) => this.handleClick(i,e)}\r\n                    />\r\n                </div>\r\n                <div className=\"game-info\">\r\n                    <div>{this.getStatus()}</div>\r\n                    <div>{\"Mine Remains: \" + this.state.remain}</div>\r\n                    <div>{\"Time: \" + this.state.now}</div>\r\n                    <div>\r\n                        <li>{\"Left Click to select\"}</li>\r\n                        <li>{\"Right Click to flag\"}</li>\r\n                        <li>{\"Middle Button to auto select\"}</li>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    check() {\r\n        return this.state.mines >= this.state.rows * this.state.cols;\r\n    }\r\n\r\n    getStatus() {\r\n        switch (this.state.GameOver) {\r\n            case -1:\r\n                return \"Ready to Begin\";\r\n            case 0:\r\n                return \"In Game\";\r\n            case 1:\r\n              return \"You Lost\";\r\n            case 2:\r\n              return \"You win\";\r\n            default:\r\n              return \"UNKNOWN\"\r\n        }\r\n    }\r\n\r\n    initilize(index) {\r\n        const size = this.state.rows * this.state.cols;\r\n        for (let i=0; i < this.state.mines; i++) {\r\n            let mine = Math.floor(Math.random() * size);\r\n            if (mine === index || this.state.isMine[mine] === 1) {\r\n                i--;\r\n            }\r\n            else {\r\n                this.state.isMine[mine] = 1;\r\n            }\r\n        }\r\n        let isOpen = Array(this.state.cols * this.state.rows).fill(0);\r\n        this.setState({\r\n            isOpen: isOpen,\r\n            GameOver: 0,\r\n        });\r\n    }\r\n\r\n    open(index) {\r\n        if (!this.state.isOpen[index] && !this.state.isFlag[index]) {\r\n            if (this.state.isMine[index]) {\r\n                this.gameover(1);\r\n            }\r\n            else {\r\n                this.calculate(index);\r\n                let opened = 0;\r\n                for (let i=0;i < this.state.cols * this.state.rows; i++) {\r\n                    if (this.state.isOpen[i]) {\r\n                        opened++;\r\n                    }\r\n                }\r\n                if (opened === this.state.cols * this.state.rows - this.state.mines) {\r\n                  this.gameover(2)\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    gameover(mode) {\r\n      this.setState({\r\n        GameOver: mode,\r\n      });\r\n    }\r\n\r\n    calculate(index) {\r\n        if (!this.state.isOpen[index] && !this.state.isFlag[index]) {\r\n\r\n            let up = false;\r\n            let down = false;\r\n            let left = false;\r\n            let right = false;\r\n\r\n            let sum = 0;\r\n\r\n            if (this.state.isMine[index]) {\r\n              return 1;\r\n            }\r\n\r\n            else {\r\n                const history = this.state.history;\r\n                const current = history[history.length - 1];\r\n                const squares = current.squares;\r\n                const isOpen = this.state.isOpen;\r\n                if (index % this.state.cols) {\r\n                    if (this.state.isMine[index - 1]) {\r\n                        sum += 1;\r\n                    }\r\n                    left = true;\r\n                }\r\n                if (index % this.state.cols !== this.state.cols-1) {\r\n                    if (this.state.isMine[index + 1]) {\r\n                        sum += 1;\r\n                    }\r\n                    right = true;\r\n                }\r\n                if (index - this.state.cols >= 0) {\r\n                    if (this.state.isMine[index - this.state.cols]) {\r\n                        sum += 1;\r\n                    }\r\n                    up = true;\r\n                }\r\n                if (index + this.state.cols < this.state.cols * this.state.rows) {\r\n                    if (this.state.isMine[index + this.state.cols]) {\r\n                        sum += 1;\r\n                    }\r\n                    down = true;\r\n                }\r\n\r\n                if (up && left) {\r\n                    if (this.state.isMine[index - 1 - this.state.cols]) {\r\n                        sum += 1;\r\n                    }\r\n                }\r\n                if (up && right) {\r\n                    if (this.state.isMine[index + 1 - this.state.cols]) {\r\n                        sum += 1;\r\n                    }\r\n                }\r\n                if (down && left) {\r\n                    if (this.state.isMine[index - 1 + this.state.cols]) {\r\n                        sum += 1;\r\n                    }\r\n                }\r\n                if (down && right) {\r\n                    if (this.state.isMine[index + 1 + this.state.cols]) {\r\n                        sum += 1;\r\n                    }\r\n                }\r\n                if (sum) {squares[index] = sum;}\r\n                isOpen[index] = true;\r\n                this.setState({\r\n                    isOpen: isOpen,\r\n                    history: history.concat([{\r\n                        squares: squares\r\n                    }]),\r\n                });\r\n\r\n                if (sum) {\r\n                  return sum;\r\n                }\r\n                else {\r\n                    if (left) {\r\n                        this.calculate(index - 1)\r\n                    }\r\n                    if (right) {\r\n                        this.calculate(index + 1)\r\n                    }\r\n\r\n                    if (up) {\r\n                        this.calculate(index - this.state.cols)\r\n                    }\r\n\r\n                    if (down) {\r\n                        this.calculate(index + this.state.cols)\r\n                    }\r\n\r\n                    if (up && left) {\r\n                        this.calculate(index - 1 - this.state.cols)\r\n                    }\r\n                    if (up && right) {\r\n                        this.calculate(index + 1 - this.state.cols)\r\n                    }\r\n\r\n                    if (down && left) {\r\n                        this.calculate(index - 1 + this.state.cols)\r\n                    }\r\n\r\n                    if (down && right) {\r\n                        this.calculate(index + 1 + this.state.cols)\r\n                    }\r\n                    return 0\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n}\r\n\r\n// ========================================\r\ndocument.addEventListener('contextmenu', event => event.preventDefault());\r\nexport default Game;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}