{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Square","react_default","a","createElement","className","disabled","this","props","isOpen","value","name","onMouseUp","onClick","React","Component","Board","i","_this","App_Square","squares","e","index","row","settings","cols","push","renderSquare","rows","renderRow","Game","_this2","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","Array","fill","isMine","isFlag","GameOver","mines","remain","initialize","nativeEvent","which","try","flag","open","self","setInterval","setState","now","Date","_this3","slice","App_Board","handleClick","getStatus","restart","_this4","size","mine","Math","floor","random","gameover","calculate","opened","mode","up","down","left","right","sum","result","window","location","reload","App","_this5","difficulty","start","handleChange","bind","assertThisInitialized","handleSubmit","event","defineProperty","target","parseInt","preventDefault","App_Game","onSubmit","type","checked","onChange","min","max","document","addEventListener","Boolean","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.28679532.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n//import logo from './logo.svg';\r\nimport './App.css';\r\n\r\n/* The cell for a single slot */\r\nclass Square extends React.Component {\r\n    render() {\r\n        return (\r\n            <button className=\"square\" disabled={this.props.isOpen && this.props.value === null} name={this.props.value} onMouseUp={this.props.onClick}>\r\n                {this.props.value}\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\n/* The Board contains all the Squares */\r\nclass Board extends React.Component {\r\n    // render a single square\r\n    renderSquare(i) {\r\n        return (\r\n            <Square\r\n                isOpen={this.props.isOpen[i]}\r\n                value={this.props.squares[i]}\r\n                onClick={(e) => this.props.onClick(i,e)}\r\n            />\r\n        );\r\n    }\r\n\r\n    // render a single row of squares\r\n    renderRow(index) {\r\n        let row = [];\r\n        for (let i = 0; i < this.props.settings.cols; i++) {\r\n            row.push(this.renderSquare(i+this.props.settings.cols*index));\r\n        }\r\n        return row\r\n    }\r\n\r\n    // render the whole board\r\n    render() {\r\n        let rows = [];\r\n        for (let i = 0; i < this.props.settings.rows; i++) {\r\n            rows.push(\r\n                <div className=\"board-row\">\r\n                    {this.renderRow(i)}\r\n                </div>\r\n            );\r\n        }\r\n        return (\r\n            <div>\r\n                {rows}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n/* The Game contains all the information as soon as the game starts */\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            squares: Array(this.props.cols * this.props.rows).fill(null),  // array of all values of the squares\r\n            isMine: Array(this.props.rows * this.props.cols).fill(0),  // array of telling if a square is a mine\r\n            isOpen: Array(this.props.rows * this.props.cols).fill(0),  // array of telling if a square is opened\r\n            isFlag: Array(this.props.rows * this.props.cols).fill(0),  // array of telling if a square is flagged\r\n            GameOver: -1,  // identifier to tell the game state: -1 not yet start, 0 in game, 1 game over, 2 win\r\n            rows: this.props.rows,  // the number of rows\r\n            cols: this.props.cols,  // the number of cols\r\n            mines: this.props.mines,  // the number of mines\r\n            remain: this.props.mines,  // the number of remain mines: mines - flags\r\n        };\r\n\r\n    }\r\n\r\n    // handle any clicks\r\n    handleClick(i,e) {\r\n        if (this.state.GameOver === -1) {  // if the game has not begun, we initialize the board and open the square\r\n            this.initialize(i);\r\n        }\r\n        else if (!this.state.GameOver && e.nativeEvent.which === 1) {  // it is a left click, we open the square\r\n          this.open(i)\r\n\r\n        }\r\n        else if (!this.state.GameOver && e.nativeEvent.which === 3) {  // it is a right click, we flag the square\r\n          this.flag(i)\r\n        }\r\n        else if (!this.state.GameOver && e.nativeEvent.which === 2) {  // it is a middle button click, we try fast finish\r\n          this.try(i)\r\n        }\r\n    }\r\n\r\n    // it will run every second\r\n    componentDidMount() {\r\n        const self = this;\r\n        setInterval(function() {\r\n            self.setState({\r\n                now: new Date(),\r\n            });\r\n        }, 1000);\r\n    }\r\n\r\n    // render the game based on the game state\r\n    render() {\r\n        let squares = this.state.squares.slice();\r\n        if (this.state.GameOver === 1) {  // display the mines if game over\r\n            for (let i = 0; i < this.state.cols * this.state.rows; i++) {\r\n                if (this.state.isMine[i]) {\r\n                    if (!this.state.isFlag[i]) {  // these mines are not flagged\r\n                        squares[i] = \"@\";\r\n                    }\r\n                }\r\n                else if (this.state.isFlag[i]) {  // these squares are wrongly flagged\r\n                    squares[i] = \"X\";\r\n                }\r\n            }\r\n        }\r\n        if (this.state.GameOver === 2) {  // marks all mines as flagged when win\r\n            for (let i = 0; i < this.state.cols * this.state.rows; i++) {\r\n                if (this.state.isMine[i]) {\r\n                    squares[i] = \"P\";\r\n                }\r\n            }\r\n        }\r\n        return (\r\n            <div className=\"game\">\r\n                <div className=\"game-board\">\r\n                    <Board\r\n                        squares={squares}\r\n                        isOpen={this.state.isOpen}\r\n                        isFlag={this.state.isFlag}\r\n                        isMine={this.state.isMine.slice().fill(0)}\r\n                        settings={{rows: this.state.rows, cols: this.state.cols}}\r\n                        onClick={(i,e) => this.handleClick(i,e)}\r\n                    />\r\n                </div>\r\n                <div className=\"game-info\">\r\n                    <div>{this.getStatus()}</div>\r\n                    <div>{\"Mine Remains: \" + this.state.remain}</div>\r\n                    <div>{\"Time: \" + this.state.now}</div>\r\n                    <div>\r\n                        <li>{\"Left Click to select\"}</li>\r\n                        <li>{\"Right Click to flag\"}</li>\r\n                        <li>{\"Middle Button to auto select\"}</li>\r\n                        <li>{\"Reload the page to restart\"}</li>\r\n                    </div>\r\n                    <button onClick={Game.restart}>Restart</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // not currently used, but it can check if the mines number is not too large\r\n    check() {\r\n        return this.state.mines >= this.state.rows * this.state.cols;\r\n    }\r\n\r\n    // display message base on game state\r\n    getStatus() {\r\n        switch (this.state.GameOver) {\r\n            case -1:\r\n                return \"Ready to Begin\";\r\n            case 0:\r\n                return \"In Game\";\r\n            case 1:\r\n              return \"You Lost\";\r\n            case 2:\r\n              return \"You win\";\r\n            default:\r\n              return \"UNKNOWN\"\r\n        }\r\n    }\r\n\r\n    // initialize the board and make sure the first step is not a mine\r\n    initialize(index) {\r\n        const size = this.state.rows * this.state.cols;\r\n        const isMine = this.state.isMine.slice();\r\n        for (let i=0; i < this.state.mines; i++) {\r\n            let mine = Math.floor(Math.random() * size);\r\n            if (mine === index || isMine[mine] === 1) {  // we have a same pos or it is our first step\r\n                i--;\r\n            }\r\n            else {\r\n                isMine[mine] = 1;\r\n            }\r\n        }\r\n        let isOpen = Array(this.state.cols * this.state.rows).fill(0);\r\n        this.setState({\r\n            isMine: isMine,\r\n            isOpen: isOpen,\r\n            GameOver: 0,\r\n        },() => {  // make sure we have set state first (Asynchronous !)\r\n            this.open(index);\r\n        });\r\n    }\r\n\r\n    // open the target square and it has consequence\r\n    open(index) {\r\n        if (!this.state.isOpen[index] && !this.state.isFlag[index]) {  // we don't open opened or flagged squares\r\n            if (this.state.isMine[index]) {  // unluckily, the square is a mine, better luck next time\r\n                this.gameover(1);\r\n            }\r\n            else {\r\n                this.calculate(index);  // calculate the value and may open other squares recursively\r\n\r\n                // check if the player has won\r\n                let opened = 0;\r\n                for (let i=0;i < this.state.cols * this.state.rows; i++) {\r\n                    if (this.state.isOpen[i]) {\r\n                        opened++;\r\n                    }\r\n                }\r\n                if (opened === this.state.cols * this.state.rows - this.state.mines) {\r\n                  this.gameover(2)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // set game state\r\n    gameover(mode) {\r\n      this.setState({\r\n        GameOver: mode,\r\n      });\r\n    }\r\n\r\n    // calculate the value and may open other squares recursively\r\n    calculate(index) {\r\n        if (!this.state.isOpen[index] && !this.state.isFlag[index]) {\r\n            let up = false;  // boolean if we can check the upper square\r\n            let down = false;  // boolean if we can check the lower square\r\n            let left = false;  // boolean if we can check the left square\r\n            let right = false;  // boolean if we can check the right square\r\n\r\n\r\n            let sum = 0;  // sum of mines around the square\r\n\r\n            if (this.state.isMine[index]) {  // it is a mine we stop recursion\r\n              return 1;\r\n            }\r\n\r\n            else {\r\n                const squares = this.state.squares;\r\n                const isOpen = this.state.isOpen;\r\n\r\n                if (index % this.state.cols) {  // there is a square on the left, so we can check left\r\n                    if (this.state.isMine[index - 1]) {\r\n                        sum += 1;\r\n                    }\r\n                    left = true;\r\n                }\r\n                if (index % this.state.cols !== this.state.cols-1) {  // there is a square on the right, so we can check right\r\n                    if (this.state.isMine[index + 1]) {\r\n                        sum += 1;\r\n                    }\r\n                    right = true;\r\n                }\r\n                if (index - this.state.cols >= 0) {\r\n                    if (this.state.isMine[index - this.state.cols]) {  // up\r\n                        sum += 1;\r\n                    }\r\n                    up = true;\r\n                }\r\n                if (index + this.state.cols < this.state.cols * this.state.rows) {  // down\r\n                    if (this.state.isMine[index + this.state.cols]) {\r\n                        sum += 1;\r\n                    }\r\n                    down = true;\r\n                }\r\n\r\n                if (up && left) {\r\n                    if (this.state.isMine[index - 1 - this.state.cols]) {  // we check up && left\r\n                        sum += 1;\r\n                    }\r\n                }\r\n                if (up && right) {\r\n                    if (this.state.isMine[index + 1 - this.state.cols]) {  // up && right\r\n                        sum += 1;\r\n                    }\r\n                }\r\n                if (down && left) {\r\n                    if (this.state.isMine[index - 1 + this.state.cols]) {  // ...\r\n                        sum += 1;\r\n                    }\r\n                }\r\n                if (down && right) {\r\n                    if (this.state.isMine[index + 1 + this.state.cols]) {  // ..\r\n                        sum += 1;\r\n                    }\r\n                }\r\n                if (sum) {squares[index] = sum;}  // if there are at least one mine, we give it a value\r\n                isOpen[index] = true;  // it is safe to open the square\r\n                this.setState({\r\n                    isOpen: isOpen,\r\n                    squares: squares\r\n                });\r\n\r\n                if (sum) {  // return the value if we find mines\r\n                  return sum;\r\n                }\r\n                else {  // we don;t find mines and we can search recursively\r\n                    if (left) {\r\n                        this.calculate(index - 1)\r\n                    }\r\n                    if (right) {\r\n                        this.calculate(index + 1)\r\n                    }\r\n\r\n                    if (up) {\r\n                        this.calculate(index - this.state.cols)\r\n                    }\r\n\r\n                    if (down) {\r\n                        this.calculate(index + this.state.cols)\r\n                    }\r\n\r\n                    if (up && left) {\r\n                        this.calculate(index - 1 - this.state.cols)\r\n                    }\r\n                    if (up && right) {\r\n                        this.calculate(index + 1 - this.state.cols)\r\n                    }\r\n\r\n                    if (down && left) {\r\n                        this.calculate(index - 1 + this.state.cols)\r\n                    }\r\n\r\n                    if (down && right) {\r\n                        this.calculate(index + 1 + this.state.cols)\r\n                    }\r\n                    return 0\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    // fast open all the squares if there are exactly flags around the opened & clicked square\r\n    try(index) {\r\n        const squares = this.state.squares.slice();\r\n        if (this.state.isOpen[index]) {  // we only perform this action if it is opened\r\n            let up = false;  // boolean if we can check the upper square\r\n            let down = false;  // boolean if we can check the lower square\r\n            let left = false;  // boolean if we can check the left square\r\n            let right = false;  // boolean if we can check the right square\r\n            let sum = 0;  // the sum of all flags\r\n\r\n            if (index % this.state.cols) {  // there is a square on the left, so we can check left\r\n                if (this.state.isFlag[index - 1]) {\r\n                    sum += 1;\r\n                }\r\n                left = true;\r\n            }\r\n            if (index % this.state.cols !== this.state.cols-1) {  // there is a square on the right\r\n                if (this.state.isFlag[index + 1]) {\r\n                    sum += 1;\r\n                }\r\n                right = true;\r\n            }\r\n            if (index - this.state.cols >= 0) {\r\n                if (this.state.isFlag[index - this.state.cols]) {  // there is a square above\r\n                    sum += 1;\r\n                }\r\n                up = true;\r\n            }\r\n            if (index + this.state.cols < this.state.cols * this.state.rows) {  // there is a square under\r\n                if (this.state.isFlag[index + this.state.cols]) {\r\n                    sum += 1;\r\n                }\r\n                down = true;\r\n            }\r\n\r\n            if (up && left) {  // we check up-left square\r\n                if (this.state.isFlag[index - 1 - this.state.cols]) {\r\n                    sum += 1;\r\n                }\r\n            }\r\n            if (up && right) {  // up && right\r\n                if (this.state.isFlag[index + 1 - this.state.cols]) {\r\n                    sum += 1;\r\n                }\r\n            }\r\n            if (down && left) {  // down && left\r\n                if (this.state.isFlag[index - 1 + this.state.cols]) {\r\n                    sum += 1;\r\n                }\r\n            }\r\n            if (down && right) {  // down && right\r\n                if (this.state.isFlag[index + 1 + this.state.cols]) {\r\n                    sum += 1;\r\n                }\r\n            }\r\n\r\n            // if the sum of flags equals to the number of mines around, we can preform a fast open on nearby square\r\n            if (sum === squares[index]) {\r\n                if (left) {\r\n                    this.open(index - 1);\r\n                }\r\n                if (right) {\r\n                    this.open(index + 1);\r\n                }\r\n                if (up) {\r\n                    this.open(index - this.state.cols);\r\n                }\r\n                if (down) {\r\n                    this.open(index + this.state.cols);\r\n                }\r\n                if (left && up) {\r\n                    this.open(index - 1 - this.state.cols);\r\n                }\r\n                if (right && up) {\r\n                    this.open(index + 1 - this.state.cols);\r\n                }\r\n                if (left && down) {\r\n                    this.open(index - 1 + this.state.cols);\r\n                }\r\n                if (right && down) {\r\n                    this.open(index + 1 + this.state.cols);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // flag or remove a flag\r\n    flag(i) {\r\n        const squares = this.state.squares.slice();\r\n        const isFlag = this.state.isFlag.slice();\r\n        if (!this.state.isOpen[i]) {  // we cannot flag a opened square\r\n            isFlag[i] = !isFlag[i];  // reverse the flag state\r\n\r\n            // calculate remains\r\n            let result;\r\n            if (isFlag[i]) {\r\n                squares[i] = \"P\";\r\n                result = 1;\r\n            }\r\n            else {\r\n                squares[i] = null;\r\n                result = -1;\r\n            }\r\n            this.setState({\r\n                isFlag : isFlag,\r\n                squares: squares,\r\n                remain: this.state.remain - result,\r\n            })\r\n        }\r\n    }\r\n\r\n    // reload the page\r\n    static restart() {\r\n        window.location.reload();\r\n    }\r\n\r\n}\r\n\r\n/* before we start the game, asking for some settings */\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            difficulty: 1,  // difficulty : 1 easy, 2 normal, 3 hard, 4 custom\r\n            cols: null,  // number of columns\r\n            rows: null,  // number or rows\r\n            mines: null,  // number of mines\r\n            start: false,  // is the game started\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    // handle form input changes\r\n    handleChange(event) {\r\n        this.setState({[event.target.name]: parseInt(event.target.value)});\r\n    }\r\n\r\n    // handle form submit\r\n    handleSubmit(event) {\r\n        let cols, rows, mines, start;\r\n        switch (this.state.difficulty) {\r\n            // *** SETTINGS *** //\r\n            case 1:  // EASY\r\n                cols = 9;\r\n                rows = 9;\r\n                mines = 10;\r\n                start = true;\r\n                break;\r\n            case 2:  // Normal\r\n                cols = 16;\r\n                rows = 16;\r\n                mines = 40;\r\n                start = true;\r\n                break;\r\n            case 3:  // Hard\r\n                cols = 30;\r\n                rows = 16;\r\n                mines = 99;\r\n                start = true;\r\n                break;\r\n            case 4:  // Custom\r\n                if (this.state.rows && this.state.cols && this.state.mines) {  // a safe check that all fields are filled\r\n                    start = true;\r\n                    cols = this.state.rows;\r\n                    rows = this.state.cols;\r\n                    mines = this.state.mines;\r\n                }\r\n                break;\r\n            default:\r\n        }\r\n        if (start) {\r\n            this.setState({\r\n                cols: cols,\r\n                rows: rows,\r\n                mines: mines,\r\n                start: start,\r\n            });\r\n        }\r\n\r\n        event.preventDefault();\r\n    }\r\n\r\n    // we render the page differently based on if we start the game or not\r\n    render() {\r\n        if (this.state.start) {  // render the game if we have start the game\r\n            return(\r\n                <div>\r\n                    <Game\r\n                        cols={this.state.cols}\r\n                        rows={this.state.rows}\r\n                        mines={this.state.mines}\r\n                        difficulty={this.state.difficulty}\r\n                    />\r\n                </div>\r\n            )\r\n        }\r\n        // render the setting form before start the game\r\n        return (\r\n            <form onSubmit={this.handleSubmit}>\r\n                <div>\r\n                    Difficulty:\r\n                    <input type=\"radio\" name=\"difficulty\"\r\n                               value=\"1\"\r\n                               checked={this.state.difficulty === 1}\r\n                               onChange={this.handleChange} />{\"Easy\"}\r\n                    <input type=\"radio\" name=\"difficulty\"\r\n                               value=\"2\"\r\n                               checked={this.state.difficulty === 2}\r\n                               onChange={this.handleChange} />{\"Normal\"}\r\n                    <input type=\"radio\" name=\"difficulty\"\r\n                               value=\"3\"\r\n                               checked={this.state.difficulty === 3}\r\n                               onChange={this.handleChange} />{\"Hard\"}\r\n                    <input type=\"radio\" name=\"difficulty\"\r\n                               value=\"4\"\r\n                               checked={this.state.difficulty === 4}\r\n                               onChange={this.handleChange} />{\"Custom\"}\r\n                </div>\r\n                <br/>\r\n                <div>\r\n                    Cols (between 3 and 50): <input type=\"number\" name=\"cols\" value={this.state.cols} min=\"3\" max=\"50\" onChange={this.handleChange} disabled={this.state.difficulty!==4}/><br/>\r\n                    Rows (between 3 and 50): <input type=\"number\" name=\"rows\" value={this.state.rows} min=\"3\" max=\"50\" onChange={this.handleChange} disabled={this.state.difficulty!==4}/><br/>\r\n                    Quantity (between 1 and the size): <input type=\"number\" name=\"mines\" value={this.state.mines} onChange={this.handleChange} min=\"1\" max={this.state.cols * this.state.rows - 1} disabled={this.state.difficulty!==4}/>\r\n                </div>\r\n                <br/>\r\n                <input type=\"submit\" value=\"Start Game\" />\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\n// ========================================\r\ndocument.addEventListener('contextmenu', event => event.preventDefault());  // prevent right click menu\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}